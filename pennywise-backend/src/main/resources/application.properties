# Spring Datasource Properties for Supabase (PostgreSQL) - Using Session Pooler

# spring.datasource.url=jdbc:postgresql://aws-0-ca-central-1.pooler.supabase.com:5432/postgres
# spring.datasource.url=jdbc:postgresql://aws-0-ca-central-1.pooler.supabase.com:6543/postgres?user=postgres.lnxcddwkjfqmyimnxetv&password=${DB_PASSWORD}&prepareThreshold=0
# spring.datasource.driverClassName is typically auto-detected for PostgreSQL with Spring Boot
spring.datasource.url=jdbc:postgresql://aws-0-ca-central-1.pooler.supabase.com:6543/postgres?sslmode=require

spring.datasource.username=postgres.lnxcddwkjfqmyimnxetv
spring.datasource.password=${DB_PASSWORD}

# Spring JPA Properties
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update 
spring.jpa.show-sql=true 

# # HikariCP pool tuning (keep max well under the 15-slot cap)
# spring.datasource.hikari.maximum-pool-size=10
# spring.datasource.hikari.minimum-idle=2
# spring.datasource.hikari.idle-timeout=300000    
# spring.datasource.hikari.max-lifetime=1800000 

# HikariCP pool tuning to stay safely below Supabaseâ€™s free-tier limit
spring.datasource.hikari.maximum-pool-size=3
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.idle-timeout=30000         
spring.datasource.hikari.max-lifetime=1800000      
spring.datasource.hikari.leak-detection-threshold=60000 

# H2 Console Properties (Commented out as we are moving to PostgreSQL)
# spring.h2.console.enabled=true
# spring.h2.console.path=/h2-console
# spring.h2.console.settings.trace=false
# spring.h2.console.settings.web-allow-others=false

# spring.jpa.defer-datasource-initialization=true # Review if needed for PostgreSQL
# spring.sql.init.mode=always # Review if needed for PostgreSQL

# JWT Settings
app.jwt.secret=${JWT_SECRET}
app.jwt.expirationMs=86400000

openai.api.key=${OPENAI_API_KEY}